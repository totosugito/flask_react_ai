import io
from contextlib import redirect_stdout
from typing import Optional

import pandas as pd
from plotly import express as px
from plotly import graph_objects as go
from plotly.graph_objects import Figure

from .llm import LLM
from .prompts.generate_python_code import GeneratePythonCodePrompt


class ChartGPT:
    def __init__(
        self,
        api_key: Optional[str] = None,
        **kwargs,
    ) -> None:
        """_summary_

        Args:
            llm (Optional[str], optional): _description_. Defaults to "openai".
            conversational (bool, optional): _description_. Defaults to True.
            verbose (bool, optional): _description_. Defaults to False.
        """
        self.llm = LLM(api_key=api_key, **kwargs)
        self.fig = None
        self.last_run_code = None
        self.variables_payload = {}

    def load(self, df: pd.DataFrame) -> None:
        """Load a DataFrame.

        Args:
            df (pd.DataFrame): A DataFrame.

        Returns:
            None
        """
        self.df = df
        self.df_columns = df.columns

    def plot(
        self, prompt: str, show_code=False, debug=False, return_fig=False
    ) -> Figure:
        """Generate a plot based on the prompt.

        Args:
            prompt (Optional[str]): _description_
            show_code (bool, optional): Print the code generated by the model. \
                Defaults to False.
            debug (bool, optional): _description_. Defaults to False.

        Returns:
            str: _description_
        """

        if debug:
            code = """
import plotly.graph_objects as go

fig = go.Figure
fig"""
        else:
            self.variables_payload = {
                "question": prompt,
                "df_columns": self.df_columns,
                "user_prompt": prompt,
            }
            instructions = str(GeneratePythonCodePrompt(**self.variables_payload))

            code = self.llm.generate_code(instructions)

        fig = self.run_code(
            code,
            self.df,
        )

        self.last_run_code = code
        self.fig = fig

        if show_code:
            print(code)

        if return_fig:
            return fig
        fig.show()
        return

    def run_code(
        self,
        code: str,
        df: pd.DataFrame,
        use_error_correction_framework: bool = False,
    ):
        """Execute Python code and return the variable on the last line.
        Args:
            code (str): A python code to execute
            df (pd.DataFrame): A full Pandas DataFrame
            use_error_correction_framework (bool): Turn on Error Correction mechanism.
            Default to True

        Returns:

        """
        self.last_run_code = code

        environment: dict = {"pd": pd, "go": go, "px": px, "df": df}

        with redirect_stdout(io.StringIO()) as output:
            n_retries = 0
            while n_retries < 2:
                try:
                    exec(code, environment)
                    code_ran = code
                    break
                except Exception as e:
                    if not use_error_correction_framework:
                        raise e
                    n_retries += 1

        captured_output = output.getvalue()

        lines = code_ran.strip().split("\n")
        last_line = lines[-1].strip()

        try:
            return eval(last_line, environment)
        except Exception:
            return captured_output
